/*
 * Mandatory:
 *
 * vars.nginxIngressController.image.name
 * vars.nginxIngressController.image.version
 * vars.nginxIngressController.limits.cpu
 * vars.nginxIngressController.limits.memory
 * vars.nginxIngressController.requests.cpu
 * vars.nginxIngressController.requests.memory
 *
 * Optional:
 *
 * vars.nginxIngressController.tolerations[].key
 * vars.nginxIngressController.tolerations[].effect
 * vars.nginxIngressController.tolerations[].value
 */

import "tolerations.stg"

nginx-ingress-daemonset-yaml(parent, vars) ::= <<

---

apiVersion: v1
kind: ConfigMap
metadata:
  namespace: kube-ingress
  name: nginx
  labels:
    name: nginx-ingress-controller
    k8s-app: nginx-ingress-controller
    robobeerun.com/group: cluster-ingress
data:
  proxy-connect-timeout: "15"
  proxy-read-timeout: "600"
  proxy-send-timeout: "600"
  hsts-include-subdomains: "false"
  proxy-body-size: "4m"
  server-name-hash-bucket-size: "512"
  server-name-hash-max-size: "2024"

---

apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: nginx-ingress-controller
  labels:
    name: nginx-ingress-controller
    k8s-app: nginx-ingress-controller
    robobeerun.com/group: cluster-ingress
  namespace: kube-ingress
spec:
  template:
    metadata:
      labels:
        name: nginx-ingress-controller
        k8s-app: nginx-ingress-controller
        robobeerun.com/group: cluster-ingress
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      terminationGracePeriodSeconds: 60
      nodeSelector:
        robobeerun.com/role: edge-router
      containers:
      - image: <vars.nginxIngressController.image.name>:<vars.nginxIngressController.image.version>
        name: nginx-ingress-controller
        resources:
          limits:
            cpu: <vars.nginxIngressController.limits.cpu>
            memory: <vars.nginxIngressController.limits.memory>
          requests:
            cpu: <vars.nginxIngressController.requests.cpu>
            memory: <vars.nginxIngressController.requests.memory>
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        ports:
        - containerPort: 80
          name: http
        - containerPort: 443
          name: https
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        args:
        - /nginx-ingress-controller
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
        - --configmap=$(POD_NAMESPACE)/nginx
<tolerations(parent, vars, vars.nginxIngressController.tolerations)>

>>
