/*
 * Mandatory:
 * 
 * vars.defaultHttpBackend.image.name
 * vars.defaultHttpBackend.image.version
 * vars.defaultHttpBackend.limits.cpu
 * vars.defaultHttpBackend.limits.memory
 * vars.defaultHttpBackend.requests.cpu
 * vars.defaultHttpBackend.requests.memory
 * 
 * Optional:
 * 
 * vars.defaultHttpBackend.tolerations[].key
 * vars.defaultHttpBackend.tolerations[].effect
 * vars.defaultHttpBackend.tolerations[].value
 */

import "tolerations.stg"
import "affinities.stg"

default-backend-yaml(parent, vars) ::= <<
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: default-http-backend
  labels:
    k8s-app: default-http-backend
    robobeerun.com/group: cluster-ingress
  namespace: kube-ingress
spec:
  replicas: 1
  template:
    metadata:
      labels:
        k8s-app: default-http-backend
        robobeerun.com/group: cluster-ingress
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: <vars.defaultHttpBackend.image.name>:<vars.defaultHttpBackend.image.version>
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: <vars.defaultHttpBackend.limits.cpu>
            memory: <vars.defaultHttpBackend.limits.memory>
          requests:
            cpu: <vars.defaultHttpBackend.requests.cpu>
            memory: <vars.defaultHttpBackend.requests.memory>
affinitiesGroup(parent, vars)>
<tolerationMaster(parent, vars)>
<tolerations(parent, vars, vars.nginxIngressController.tolerations)>

---

apiVersion: v1
kind: Service
metadata:
  name: default-http-backend
  namespace: kube-ingress
  labels:
    k8s-app: default-http-backend
    robobeerun.com/group: cluster-ingress
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    k8s-app: default-http-backend

>>
