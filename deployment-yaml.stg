/*
 * Mandatory:
 *
 * vars.nginxIngressController.image.name
 * vars.nginxIngressController.image.version
 *
 * Optional:
 * 
 * vars.nginxIngressController.limits.cpu
 * vars.nginxIngressController.limits.memory
 * vars.nginxIngressController.requests.cpu
 * vars.nginxIngressController.requests.memory
 * vars.nginxIngressController.affinity.key
 * vars.nginxIngressController.affinity.name
 * vars.nginxIngressController.affinity.required
 * vars.nginxIngressController.allowOnMaster
 * vars.nginxIngressController.tolerations[].key
 * vars.nginxIngressController.tolerations[].effect
 * vars.nginxIngressController.tolerations[].value
 */

import "tolerations.stg"

deployment-yaml(parent, vars) ::= <<
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx-ingress-controller
  namespace: ingress-nginx
  labels:
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "ingress-nginx"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ingress-nginx
  template:
    metadata:
      labels:
        app: ingress-nginx
      annotations:
        prometheus.io/port: '10254'
        prometheus.io/scrape: 'true'
    spec:
      serviceAccountName: nginx-ingress-serviceaccount
      containers:
        - name: nginx-ingress-controller
          image: <vars.nginxIngressController.image.name>:<vars.nginxIngressController.image.version>
          args:
            - /nginx-ingress-controller
            - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
            - --configmap=$(POD_NAMESPACE)/nginx-configuration
            - --tcp-services-configmap=$(POD_NAMESPACE)/tcp-services
            - --udp-services-configmap=$(POD_NAMESPACE)/udp-services
            - --annotations-prefix=nginx.ingress.kubernetes.io
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
          ports:
          - name: http
            containerPort: 80
          - name: https
            containerPort: 443
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 10254
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          securityContext:
            runAsNonRoot: false
<resourcesGroup(parent, vars, vars.defaultHttpBackend.limits, vars.defaultHttpBackend.requests)>
<tolerationMasterGroup(parent, vars, vars.defaultHttpBackend.allowOnMaster)>
<tolerationsGroup(parent, vars, vars.defaultHttpBackend.tolerations, vars.defaultHttpBackend.allowOnMaster)>
<affinitiesGroup(parent, vars, vars.defaultHttpBackend.affinity)>

>>
